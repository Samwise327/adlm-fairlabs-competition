---
title: "hapto"
format: html
editor: visual
---

## Load packages

```{r}
rm(list=ls())

library(tidyverse)
library(haven)
library(janitor)
library(lubridate)

stbio1 <- read_xpt("BIOPRO_I.XPT")
stbio2 <- read_xpt("BIOPRO_J.XPT")

demo1 <- read_xpt("DEMO_I.XPT")
demo2 <- read_xpt("DEMO_J.XPT")

demo1 <- demo1 %>%
  select(SEQN, RIAGENDR, RIDAGEYR, RIDAGEMN, RIDEXPRG)
demo2 <- demo2 %>%
  select(SEQN, RIAGENDR, RIDAGEYR, RIDAGEMN, RIDEXPRG)

my_dataframe1 <- right_join(demo1, stbio1, by="SEQN")
new_colnames1 <- sapply(my_dataframe1, function(column) {
  label <- attr(column, "label")
  if (!is.null(label) && nzchar(label)) {
    return(label)
  } else {
    return(attr(column, "name"))
  }
})
colnames(my_dataframe1) <- new_colnames1

my_dataframe2 <- right_join(demo2, stbio2, by="SEQN")
new_colnames2 <- sapply(my_dataframe2, function(column) {
  label <- attr(column, "label")
  if (!is.null(label) && nzchar(label)) {
    return(label)
  } else {
    return(attr(column, "name"))
  }
})
colnames(my_dataframe2) <- new_colnames2

my_dataframe <- bind_rows(my_dataframe1, my_dataframe2)


my_dataframe <- my_dataframe %>%
  clean_names() %>%
  mutate(gender=ifelse(gender == "1", "Male", gender),
         gender=ifelse(gender == "2", "Female", gender)) %>%
  mutate(pregnancy_status_at_exam=ifelse(pregnancy_status_at_exam == "1", "Pregnant", pregnancy_status_at_exam),
         pregnancy_status_at_exam=ifelse(pregnancy_status_at_exam == "2", "Not Pregnant", pregnancy_status_at_exam),
         pregnancy_status_at_exam=ifelse(pregnancy_status_at_exam == "3", "Unable to Determine", pregnancy_status_at_exam)) %>%
  select(-alt_comment_code,-albumin_refrigerated_serum_g_l,-blood_urea_nitrogen_mmol_l,-creatinine_refrigerated_serum_umol_l,-globulin_g_l,
         -glucose_refrigerated_serum_mmol_l,-ggt_comment_code,-iron_refrigerated_serum_umol_l,-phosphorus_mmol_l,-total_bilirubin_umol_l,
         -total_bilirubin_comment_code,-total_calcium_mmol_l,-cholesterol_refrigerated_serum_mmol_l,-total_protein_g_l,-triglycerides_refrig_serum_mmol_l,-uric_acid_umol_l, -pregnancy_status_at_exam, -respondent_sequence_number, -alanine_aminotransferase_alt_u_l, -albumin_refrigerated_serum_g_d_l, -alkaline_phosphatase_alp_iu_l, -aspartate_aminotransferase_ast_u_l, -creatine_phosphokinase_cpk_iu_l, -globulin_g_d_l, -gamma_glutamyl_transferase_ggt_iu_l, -iron_refrigerated_serum_ug_d_l, -lactate_dehydrogenase_ldh_iu_l, -osmolality_mmol_kg, -phosphorus_mg_d_l, -total_bilirubin_mg_d_l, -cholesterol_refrigerated_serum_mg_d_l, -total_protein_g_d_l,-triglycerides_refrig_serum_mg_d_l,-uric_acid_mg_d_l)

my_dataframe <- my_dataframe %>%
  remove_empty("cols") 

my_dataframe <- my_dataframe[complete.cases(my_dataframe),]

my_dataframe <- my_dataframe %>%
  mutate(ka = ifelse(gender == "Female", 0.7, 0.9),
         al = ifelse(gender == "Female", -0.241, -0.302)) %>%
  mutate(a = ifelse(creatinine_refrigerated_serum_mg_d_l/ka < 1, creatinine_refrigerated_serum_mg_d_l/ka, 1),
         b = ifelse(creatinine_refrigerated_serum_mg_d_l/ka > 1, creatinine_refrigerated_serum_mg_d_l/ka, 1)) %>%
  mutate(egfr = 142*(a^al)*(b^-1.2)*(0.9938^age_in_years_at_screening)) %>%
  mutate(egfr = ifelse(gender == "Female", egfr*1.012, egfr)) %>%
  select(-ka, -al, -a, -b)

write.csv(my_dataframe, "bmp.csv")

```

# Model False Elevations

```{r}
rm(list=ls())

library(tidyverse)
library(haven)
library(janitor)
library(lubridate)
library(embed)
library(tidymodels)

d.in <- read_csv("bmp.csv")[,-1]

d.samp <- d.in %>%
  sample_frac(.25) %>%
  mutate(potassium_mmol_l = potassium_mmol_l*runif(n(), 1.1, 1.4)) %>%
  mutate(false = "Y")

d.true <- d.in %>%
  mutate(false = "N")

d.tomodel <- bind_rows(d.samp, d.true)

write.csv(d.tomodel, "tomod.csv")

```

## UMAP Modeling

```{r}
rm(list=ls())

library(tidyverse)
library(haven)
library(janitor)
library(lubridate)
#library(embed)
library(caret)
library(umap)

d.in <- read_csv("tomod.csv")[,-1]

d.in <- d.in %>%
  mutate(gender = ifelse(gender == "Female", 0, 1))

set.seed(1234)

train_index <- createDataPartition(d.in$false, p = 0.75,
                                   list = FALSE)
train <- d.in[train_index,]
test <- d.in[-train_index,]

custom.config = umap.defaults # Set of configurations
custom.config$min_dist = 0.99 # change min_dist and n_neighbors
custom.config$n_neighbors = 10

train.umap <- umap(train %>%
                     select(-false), config=custom.config)
d.train.umap <- as.data.frame(train.umap$layout)
d.train.umap <- cbind(d.train.umap,train$false)



colnames(d.train.umap) <- c("umap1","umap2","false")
f.umap <- ggplot(d.train.umap, aes(umap1, umap2, color=as.factor(false))) +
  geom_point()

f.umap
# rec <- recipe(false ~ .,data = train) %>%
# step_normalize(all_predictors()) %>%
# step_umap(all_predictors()) %>%
# prep() %>%
# juice()
# 
# rec %>%
# ggplot(aes(x = UMAP1, y = UMAP2, color=false)) +
# geom_point(alpha = 0.7)
# 
# kmeans_spec <- kmeans(rec %>% select(UMAP1, UMAP2), centers = 5)
# kmeans_cent <- as.data.frame(kmeans_spec$cluster)
# 
# rec_all <- cbind(rec,kmeans_cent)
# 
# rec_all %>%
# ggplot(aes(x = UMAP1, y = UMAP2, color=as.factor(`kmeans_spec$cluster`))) +
# geom_point(alpha = 0.7)
# 
# # 
# # umap_df %>%
# # ggplot(aes(x = UMAP02, y = UMAP03, color=false)) +
# # geom_point(alpha = 0.7)
# # 
# # umap_df %>%
# # # ggplot(aes(x = UMAP03, y = UMAP04, color=false)) +
# # # geom_point(alpha = 0.7)
# 

```
